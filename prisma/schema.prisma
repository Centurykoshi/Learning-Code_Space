generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum MessageSender {
  USER
  BOT
}

enum MessageType {
  TEXT
  IMAGE
  CODE
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name                 String
  email                String                @unique
  emailVerified        Boolean
  image                String?
  age                  Int?
  gender               String?
  profileCompleted     Boolean               @default(false)
  role                 UserRole              @default(USER)
  banned               Boolean?
  banReason            String?
  banExpires           DateTime?
  games                Game[]
  accounts             Account[]
  sessions             Session[]
  posts                Post[]
  chatbotConversations ChatbotConversation[]
  Mood                 Mood[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

enum GameType {
  mcq
  open_ended
}

model Game {
  id          String     @id @default(uuid())
  userId      String
  questions   Question[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("games")
}

model topic_count {
  id    String @id @default(uuid())
  topic String @unique
  count Int
}

model Question {
  id                String   @id @default(uuid())
  question          String
  answer            String
  gameId            String
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?

  game Game @relation(fields: [gameId], references: [id])

  @@index([gameId])
  @@map("questions")
}

model Mood {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      String
  mood      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId])
  @@index([userId])
  @@index([date])
}

model ChatbotConversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String?
  isActive Boolean @default(true)

  summary String?
  memory  Json?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages ChatbotMessage[]

  @@index([userId])
  @@map("chatbot_conversations")
}

model ChatbotMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  content     String
  sender      MessageSender
  messageType MessageType   @default(TEXT)

  tokenCount Int?
  importance Float?

  conversationId String
  conversation   ChatbotConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("chatbot_messages")
}
